# AUTOGENERATED! DO NOT EDIT! File to edit: 02_auth.ipynb (unless otherwise specified).

__all__ = ['GhDeviceAuth']

# Cell
from fastcore.utils import *
from .core import *
import webbrowser,time

from urllib.parse import parse_qs

# Cell
_def_clientid = '771f3c3af93face45f52'

# Cell
class GhDeviceAuth(GetAttrBase):
    "Get an oauth token using the GitHub API device flow"
    _attr="params"
    def __init__(self, client_id=_def_clientid, *scopes):
        url = 'https://github.com/login/device/code'
        self.client_id = client_id
        self.params = parse_qs(urlread(url, client_id=client_id, scope=scope_str(scopes)))

    def _getattr(self,v): return v[0]

# Cell
@patch
def url_docs(self:GhDeviceAuth)->str:
    "Default instructions on how to authenticate"
    return f"""First copy your one-time code: {self.user_code}
Then visit {self.verification_uri} in your browser, and paste the code when prompted."""

# Cell
@patch
def open_browser(self:GhDeviceAuth):
    "Open a web browser with the verification URL"
    webbrowser.open(self.verification_uri)

# Cell
@patch
def auth(self:GhDeviceAuth)->str:
    "Return token if authentication complete, or `None` otherwise"
    resp = parse_qs(urlread(
        'https://github.com/login/oauth/access_token',
        client_id=self.client_id, device_code=self.device_code,
        grant_type='urn:ietf:params:oauth:grant-type:device_code'))
    err = nested_idx(resp, 'error', 0)
    if err == 'authorization_pending': return None
    if err: raise Exception(resp['error_description'][0])
    return resp['access_token'][0]

# Cell
@patch
def wait(self:GhDeviceAuth, cb:callable=None, n_polls:int=1000)->str:
    "Wait for authentication to complete, calling `cb` after each poll, if it is set"
    interval = int(self.interval)+1
    res = self.auth()
    counter=0
    while not res and counter <= n_polls:
        if cb: cb()
        time.sleep(interval)
        res = self.auth()
        counter
    return res